{"version":3,"file":"angularjs-currency-input-mask.js","sources":["angularjs-currency-input-mask.js"],"sourcesContent":["/**\n * angularjs-currency-input-mask - AngularJS Multiple pattern currency input mask\n * @version v1.1.0\n * @link https://github.com/iangoop/angularjs-currency-input-mask#readme\n * @license MIT\n */\n\r\n(function(angular) {\r\n    \"use strict\";\r\n    angular.module('cur.$mask',[])\r\n        .factory('support',support())\r\n        .directive('maskCurrency',maskCurrency())\r\n        .filter('printCurrency', printCurrency())\r\n\r\n    function mask(config) {\r\n        function pad(value,size) {\r\n            return new Array(size).concat([value]).join('0');\r\n        }\r\n        function escape(value) {\r\n            return value.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\r\n        }\r\n        function print(value) {\r\n            return value.replace(/(\\$)/g, '$$$1');\r\n        }\r\n        return {\r\n            value: function(str) {\r\n                this._value = str;\r\n                return this;\r\n            },\r\n            clear: function() {\r\n                this._value = this._value.replace(/[^\\d]/g,'')\r\n                return this;\r\n            },\r\n            minimum: function() {\r\n                if (config.decimalSize > 0) {\r\n                    var regex = RegExp('^(\\\\d{1,'+config.decimalSize+'})$','g'),\r\n                        replace = pad(\"$1\",config.decimalSize)\r\n                    this._value = this._value.replace(regex,replace)\r\n                }\r\n                return this;\r\n            },\r\n            fraction: function() {\r\n                if (config.decimalSize > 0) {\r\n                    var regex = RegExp('(\\\\d)(?=\\\\d{' + config.decimalSize + '}$)', 'g'),\r\n                        replace = \"$1\"+config.decimal\r\n                    this._value = this._value.replace(regex, replace)\r\n                }\r\n                return this;\r\n            },\r\n            ltrim: function() {\r\n                var regex = RegExp('(?=^)(0)(?!'+escape(config.decimal)+')','g'),\r\n                    replace = \"\";\r\n                this._value = this._value.replace(regex,replace)\r\n                return this;\r\n            },\r\n            group: function() {\r\n                var limit = config.decimalSize>0?escape(config.decimal):'$',\r\n                    regex = RegExp('(\\\\d)(?=(\\\\d{'+config.groupSize+'})+'+limit+')','g'),\r\n                    replace = \"$1\"+config.group;\r\n                this._value = this._value.replace(regex, replace)\r\n                return this;\r\n            },\r\n            currency: function(symbol) {\r\n                if (config.orientation == 'r') {\r\n                    var currency = this.getRightOrientedCurrency(symbol),\r\n                        regex = RegExp('(.)$','g'),\r\n                        replace = \"$1\"+print(currency)\r\n                    this._value = this._value.replace(regex,replace)\r\n                } else {\r\n                    var currency = this.getLeftOrientedCurrency(symbol),\r\n                        regex = RegExp('^(.)','g'),\r\n                        replace = print(currency)+\"$1\"\r\n                    this._value = this._value.replace(regex,replace)\r\n                }\r\n                return this;\r\n            },\r\n            getLeftOrientedCurrency: function(symbol) {\r\n                return (symbol||'')+(config.indentation||'');\r\n            },\r\n            getRightOrientedCurrency: function(symbol) {\r\n                return (config.indentation||'')+(symbol||'');\r\n            },\r\n            format: function(value,currency) {\r\n                return this\r\n                        .value(value)\r\n                        .clear()\r\n                        .minimum()\r\n                        .fraction()\r\n                        .ltrim()\r\n                        .group()\r\n                        .currency(currency)\r\n                        .toString();\r\n            },\r\n            toString: function() {\r\n                return this._value;\r\n            }\r\n        }\r\n    }\r\n\r\n    function round(num,decimalSize) {\r\n        //first part rounds correctly in case of more then 2 digits, otherwise toFixed will add up the digits\r\n        return (+(Math.round(num + (\"e+\" + decimalSize))  + (\"e-\" + decimalSize))).toFixed(decimalSize);\r\n    }\r\n\r\n    function support() {\r\n        return ['$locale','$q','$timeout',function($locale,$q,$timeout) {\r\n            return {\r\n                config: function(param) {\r\n                    var config = param || {},\r\n                        paramDefault = $locale.NUMBER_FORMATS || {},\r\n                        currencyDefault = $locale.NUMBER_FORMATS.PATTERNS || {},\r\n                        defaults = {\r\n                            indentation: '',\r\n                            orientation:'l',\r\n                            decimal: paramDefault.DECIMAL_SEP || '.',\r\n                            group: paramDefault.GROUP_SEP || ',',\r\n                            decimalSize: currencyDefault.minFrac || 2,\r\n                            groupSize: currencyDefault.gSize || 3\r\n                        }\r\n                    return angular.extend({}, defaults, config);\r\n                },\r\n                currency: function(symbol) {\r\n                    return symbol != undefined ? symbol : $locale.NUMBER_FORMATS.CURRENCY_SYM || '$'\r\n                },\r\n                getCaretPosition: function(input) {\r\n                    return $q(function(resolve,reject) {\r\n                        // timeout being used as compatibility to older angularjs versions,\r\n                        // otherwise the internal angular $digest process will fail\r\n                        $timeout(function() {\r\n                            // IE < 9 Support\r\n                            if (document.selection) {\r\n                                input.focus();\r\n                                var range = document.selection.createRange();\r\n                                var rangelen = range.text.length;\r\n                                range.moveStart('character', -input.value.length);\r\n                                var start = range.text.length - rangelen;\r\n                                resolve({\r\n                                    'start': start,\r\n                                    'end': start + rangelen\r\n                                });\r\n                            } // IE >=9 and other browsers\r\n                            else if (input.selectionStart || input.selectionStart == '0') {\r\n                                resolve({\r\n                                    'start': input.selectionStart,\r\n                                    'end': input.selectionEnd\r\n                                });\r\n                            } else {\r\n                                resolve({\r\n                                    'start': 0,\r\n                                    'end': 0\r\n                                });\r\n                            }\r\n                        })\r\n                    })\r\n                },\r\n                setCaretPosition: function(input, pos) {\r\n                    return $q(function(resolve, reject) {\r\n                        $timeout(function() {\r\n                            if (input.setSelectionRange) {\r\n                                input.focus();\r\n                                input.setSelectionRange(pos, pos);\r\n                                resolve(true);\r\n                            } else if (input.createTextRange) {\r\n                                var range = input.createTextRange();\r\n                                range.collapse(true);\r\n                                range.moveEnd('character', pos);\r\n                                range.moveStart('character', pos);\r\n                                range.select();\r\n                                resolve(true);\r\n                            }\r\n                            reject(false)\r\n                        })\r\n                    })\r\n                },\r\n                canMoveCaret: function(input) {\r\n                    return input.setSelectionRange || input.createTextRange;\r\n                }\r\n            }\r\n        }]\r\n    }\r\n\r\n    function maskCurrency() {\r\n        return ['$locale','support',function($locale,support) {\r\n            return {\r\n                require: \"ngModel\",\r\n                scope: {\r\n                    currency: '=maskCurrency',\r\n                    config: '='\r\n                },\r\n                link: function (scope, elem, attrs, ctrl) {\r\n                    if (!ctrl) return;\r\n                    var last,\r\n                        config = support.config(scope.config);\r\n\r\n                    function view(value,currency) {\r\n                        return mask(config).format(value,currency);\r\n                    }\r\n\r\n                    function model(value) {\r\n                        value = value.replace(/[^\\d]/g,'');\r\n                        if (config.decimalSize > 0) {\r\n                            var regex = RegExp('(\\\\d)(?=\\\\d{'+config.decimalSize+'}$)','g');\r\n                            value = value.replace(regex, \"$1.\");\r\n                        }\r\n                        return value;\r\n                    }\r\n\r\n                    function parser(inputValue,currency) {\r\n                        var modelValue = null;\r\n                        if (inputValue) {\r\n                            var value = view(inputValue,currency);\r\n                            modelValue = model(value);\r\n                            if (value == inputValue) {\r\n                                value = undefined;\r\n                            } else if (value == last && value.replace(/[^\\d]/g,'') == '000') {\r\n                                value = '';\r\n                                modelValue = null;\r\n                            }\r\n\r\n                            if (value !== undefined) {\r\n                                last = value;\r\n                                ctrl.$setViewValue(value);\r\n                                ctrl.$render();\r\n                                if (config.orientation == 'r') {\r\n                                    var index = value.indexOf(mask(config).getRightOrientedCurrency(currency));\r\n                                    support.getCaretPosition(elem[0]).then(function(caret) {\r\n                                        if (caret.start == caret.end && caret.start > index) {\r\n                                            support.setCaretPosition(elem[0],index)\r\n                                        }\r\n                                    })\r\n\r\n                                }\r\n                            }\r\n                        }\r\n                        return modelValue;\r\n                    }\r\n\r\n                    scope.$watch('currency',function() {\r\n                        parser(ctrl.$viewValue, support.currency(scope.currency));\r\n                    })\r\n\r\n                    scope.$watch('config', function(value) {\r\n                        config = support.config(value);\r\n                        //if browser doesn't support the caret move, force orientation to left\r\n                        if (!support.canMoveCaret(elem[0])) {\r\n                            config.orientation = 'l';\r\n                        }\r\n                        if (ctrl.$viewValue) {\r\n                            parser(ctrl.$viewValue);\r\n                        }\r\n                    })\r\n\r\n                    ctrl.$parsers.push(function(inputValue) {\r\n                        return parser(inputValue, support.currency(scope.currency));\r\n                    })\r\n\r\n                    ctrl.$formatters.push(function(value) {\r\n                        return value?view(round(value,config.decimalSize), support.currency(scope.currency)) : null;\r\n                    })\r\n                }\r\n            }\r\n        }]\r\n    }\r\n\r\n    function printCurrency() {\r\n        return ['support',function(support) {\r\n            return function(number,currency,config) {\r\n                var config = support.config(config);\r\n                return number?mask(config).format(round(number,config.decimalSize), currency) : null;\r\n            }\r\n        }]\r\n    }\r\n\r\n})(angular)\r\n"],"names":["angular","mask","config","escape","value","replace","print","str","this","_value","clear","minimum","regex","size","decimalSize","RegExp","Array","concat","join","fraction","decimal","ltrim","group","limit","groupSize","currency","symbol","orientation","getRightOrientedCurrency","getLeftOrientedCurrency","indentation","format","toString","round","num","Math","toFixed","module","factory","$locale","$q","$timeout","param","paramDefault","NUMBER_FORMATS","currencyDefault","PATTERNS","defaults","DECIMAL_SEP","GROUP_SEP","minFrac","gSize","extend","undefined","CURRENCY_SYM","getCaretPosition","input","resolve","reject","range","rangelen","start","document","selection","focus","createRange","text","length","moveStart","end","selectionStart","selectionEnd","setCaretPosition","pos","setSelectionRange","createTextRange","collapse","moveEnd","select","canMoveCaret","directive","support","require","scope","link","elem","attrs","ctrl","last","view","parser","inputValue","index","modelValue","$setViewValue","$render","indexOf","then","caret","$watch","$viewValue","$parsers","push","$formatters","filter","number"],"mappings":"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"}